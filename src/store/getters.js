const getters = {
  sidebar: state => state.app.sidebar,
  language: state => state.app.language,
  size: state => state.app.size,
  device: state => state.app.device,
  visitedViews: state => state.tagsView.visitedViews,
  cachedViews: state => state.tagsView.cachedViews,
  token: state => state.user.token,
  avatar: state => state.user.avatar,
  name: state => state.user.name,
  introduction: state => state.user.introduction,
  status: state => state.user.status,
  roles: state => state.user.roles,
  setting: state => state.user.setting,
  permission_routers: state => state.permission.routers,
  addRouters: state => state.permission.addRouters,
  errorLogs: state => state.errorLog.logs,
  users: state => state.users.fetchedUsers,
  authHost: state => state.user.authHost,

  activityPub: state => state.settings.settings['activitypub'],
  adminToken: state => state.settings.settings['admin_token'],
  assets: state => state.settings.settings['assets'],
  auth: state => state.settings.settings['auth'],
  autoLinker: state => state.settings.settings['auto_linker'],
  captcha: state => state.settings.settings['Pleroma.Captcha'],
  chat: state => state.settings.settings['chat'],
  consoleLogger: state => state.settings.settings['console'],
  corsPlugCredentials: state => state.settings.settings['credentials'],
  corsPlugExpose: state => state.settings.settings['expose'],
  corsPlugHeaders: state => state.settings.settings['headers'],
  corsPlugMaxAge: state => state.settings.settings['max_age'],
  corsPlugMethods: state => state.settings.settings['methods'],
  database: state => state.settings.settings['database'],
  ectoRepos: state => state.settings.settings['ecto_repos'],
  emailNotifications: state => state.settings.settings['email_notifications'],
  emoji: state => state.settings.settings['emoji'],
  enabled: state => state.settings.settings['enabled'],
  endpoint: state => state.settings.settings['Pleroma.Web.Endpoint'],
  exsyslogger: state => state.settings.settings['ex_syslogger'],
  facebook: state => state.settings.settings['Ueberauth.Strategy.Facebook.OAuth'],
  fetchInitialPosts: state => state.settings.settings['fetch_initial_posts'],
  formatEncoders: state => state.settings.settings['format_encoders'],
  frontend: state => state.settings.settings['frontend_configurations'],
  google: state => state.settings.settings['Ueberauth.Strategy.Google.OAuth'],
  gopher: state => state.settings.settings['gopher'],
  hackneyPools: state => state.settings.settings['hackney_pools'],
  handler: state => state.settings.settings['handler'],
  http: state => state.settings.settings['http'],
  httpSecurity: state => state.settings.settings['http_security'],
  instance: state => state.settings.settings['instance'],
  kocaptcha: state => state.settings.settings['Pleroma.Captcha.Kocaptcha'],
  level: state => state.settings.settings['level'],
  ldap: state => state.settings.settings['ldap'],
  loggerBackends: state => state.settings.settings['backends'],
  mailer: state => state.settings.settings['Pleroma.Emails.Mailer'],
  markup: state => state.settings.settings['markup'],
  mediaProxy: state => state.settings.settings['media_proxy'],
  meta: state => state.settings.settings['meta'],
  metadata: state => state.settings.settings['Pleroma.Web.Metadata'],
  microsoft: state => state.settings.settings['Ueberauth.Strategy.Microsoft.OAuth'],
  mimeTypesConfig: state => state.settings.settings['types'],
  mrfHellthread: state => state.settings.settings['mrf_hellthread'],
  mrfKeyword: state => state.settings.settings['mrf_keyword'],
  mrfMention: state => state.settings.settings['mrf_mention'],
  mrfNormalizeMarkup: state => state.settings.settings['mrf_normalize_markup'],
  mrfRejectnonpublic: state => state.settings.settings['mrf_rejectnonpublic'],
  mrfSimple: state => state.settings.settings['mrf_simple'],
  mrfSubchain: state => state.settings.settings['mrf_subchain'],
  mrfUserAllowlist: state => state.settings.settings['mrf_user_allowlist'],
  mrfVocabulary: state => state.settings.settings['mrf_vocabulary'],
  oauth2: state => state.settings.settings['oauth2'],
  passwordAuthenticator: state => state.settings.settings['password_authenticator'],
  pleromaAuthenticator: state => state.settings.settings['Pleroma.Web.Auth.Authenticator'],
  pleromaRepo: state => state.settings.settings['Pleroma.Repo'],
  pleromaUser: state => state.settings.settings['Pleroma.User'],
  port: state => state.settings.settings['port'],
  privDir: state => state.settings.settings['priv_dir'],
  queues: state => state.settings.settings['queues'],
  rateLimiters: state => state.settings.settings['rate_limit'],
  retryQueue: state => state.settings.settings['Pleroma.Web.Federator.RetryQueue'],
  richMedia: state => state.settings.settings['rich_media'],
  suggestions: state => state.settings.settings['suggestions'],
  scheduledActivity: state => state.settings.settings['Pleroma.ScheduledActivity'],
  teslaAdapter: state => state.settings.settings['adapter'],
  twitter: state => state.settings.settings['Ueberauth.Strategy.Twitter.OAuth'],
  ueberauth: state => state.settings.settings['Ueberauth'],
  uploadAnonymizeFilename: state => state.settings.settings['Pleroma.Upload.Filter.AnonymizeFilename'],
  upload: state => state.settings.settings['Pleroma.Upload'],
  uploadFilterMogrify: state => state.settings.settings['Pleroma.Upload.Filter.Mogrify'],
  uploadersLocal: state => state.settings.settings['Pleroma.Uploaders.Local'],
  uploadMDII: state => state.settings.settings['Pleroma.Uploaders.MDII'],
  uploadS3: state => state.settings.settings['Pleroma.Uploaders.S3'],
  uriSchemes: state => state.settings.settings['uri_schemes'],
  user: state => state.settings.settings['user'],
  userEmail: state => state.settings.settings['Pleroma.Emails.UserEmail'],
  vapidDetails: state => state.settings.settings['vapid_details'],
  webhookUrl: state => state.settings.settings['webhook_url']
}
export default getters
