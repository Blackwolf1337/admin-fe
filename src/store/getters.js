const getters = {
  sidebar: state => state.app.sidebar,
  language: state => state.app.language,
  size: state => state.app.size,
  device: state => state.app.device,
  visitedViews: state => state.tagsView.visitedViews,
  cachedViews: state => state.tagsView.cachedViews,
  token: state => state.user.token,
  avatar: state => state.user.avatar,
  name: state => state.user.name,
  introduction: state => state.user.introduction,
  status: state => state.user.status,
  roles: state => state.user.roles,
  setting: state => state.user.setting,
  permission_routers: state => state.permission.routers,
  addRouters: state => state.permission.addRouters,
  errorLogs: state => state.errorLog.logs,
  users: state => state.users.fetchedUsers,
  authHost: state => state.user.authHost,

  activityPubConfig: state => state.settings.settings['activitypub'],
  adminTokenConfig: state => state.settings.settings['admin_token'],
  assetsConfig: state => state.settings.settings['assets'],
  authConfig: state => state.settings.settings['auth'],
  autoLinkerConfig: state => state.settings.settings['auto_linker'],
  captchaConfig: state => state.settings.settings['Pleroma.Captcha'],
  chatConfig: state => state.settings.settings['chat'],
  consoleConfig: state => state.settings.settings['console'],
  corsPlugCredentials: state => state.settings.settings['credentials'],
  corsPlugExposeConfig: state => state.settings.settings['expose'],
  corsPlugHeaders: state => state.settings.settings['headers'],
  corsPlugMaxAge: state => state.settings.settings['max_age'],
  corsPlugMethods: state => state.settings.settings['methods'],
  databaseConfig: state => state.settings.settings['database'],
  ectoReposConfig: state => state.settings.settings['ecto_repos'],
  emojiConfig: state => state.settings.settings['emoji'],
  enabledConfig: state => state.settings.settings['enabled'],
  endpointConfig: state => state.settings.settings['Pleroma.Web.Endpoint'],
  exsysloggerConfig: state => state.settings.settings['ex_syslogger'],
  facebookConfig: state => state.settings.settings['Ueberauth.Strategy.Facebook.OAuth'],
  fetchInitialPostsConfig: state => state.settings.settings['fetch_initial_posts'],
  formatEncodersConfig: state => state.settings.settings['format_encoders'],
  frontendConfig: state => state.settings.settings['frontend_configurations'],
  googleConfig: state => state.settings.settings['Ueberauth.Strategy.Google.OAuth'],
  gopherConfig: state => state.settings.settings['gopher'],
  hackneyPoolsConfig: state => state.settings.settings['hackney_pools'],
  handlerConfig: state => state.settings.settings['handler'],
  httpConfig: state => state.settings.settings['http'],
  httpSecurityConfig: state => state.settings.settings['http_security'],
  instanceConfig: state => state.settings.settings['instance'],
  kocaptchaConfig: state => state.settings.settings['Pleroma.Captcha.Kocaptcha'],
  levelConfig: state => state.settings.settings['level'],
  ldapConfig: state => state.settings.settings['ldap'],
  loggerBackendsConfig: state => state.settings.settings['backends'],
  mailerConfig: state => state.settings.settings['Pleroma.Emails.Mailer'],
  markupConfig: state => state.settings.settings['markup'],
  mediaProxyConfig: state => state.settings.settings['media_proxy'],
  metaConfig: state => state.settings.settings['meta'],
  metadataConfig: state => state.settings.settings['Pleroma.Web.Metadata'],
  microsoftConfig: state => state.settings.settings['Ueberauth.Strategy.Microsoft.OAuth'],
  mimeTypesConfig: state => state.settings.settings['types'],
  mrfHellthreadConfig: state => state.settings.settings['mrf_hellthread'],
  mrfKeywordConfig: state => state.settings.settings['mrf_keyword'],
  mrfMentionConfig: state => state.settings.settings['mrf_mention'],
  mrfNormalizeMarkupConfig: state => state.settings.settings['mrf_normalize_markup'],
  mrfRejectnonpublicConfig: state => state.settings.settings['mrf_rejectnonpublic'],
  mrfSimpleConfig: state => state.settings.settings['mrf_simple'],
  mrfSubchainConfig: state => state.settings.settings['mrf_subchain'],
  mrfUserAllowlistConfig: state => state.settings.settings['mrf_user_allowlist'],
  oauth2Config: state => state.settings.settings['oauth2'],
  passwordAuthenticatorConfig: state => state.settings.settings['password_authenticator'],
  pleromaAuthenticatorConfig: state => state.settings.settings['Pleroma.Web.Auth.Authenticator'],
  pleromaRepoConfig: state => state.settings.settings['Pleroma.Repo'],
  pleromaUserConfig: state => state.settings.settings['Pleroma.User'],
  portConfig: state => state.settings.settings['port'],
  privDirConfig: state => state.settings.settings['priv_dir'],
  queuesConfig: state => state.settings.settings['queues'],
  rateLimitersConfig: state => state.settings.settings['rate_limit'],
  retryQueueConfig: state => state.settings.settings['Pleroma.Web.Federator.RetryQueue'],
  richMediaConfig: state => state.settings.settings['rich_media'],
  suggestionsConfig: state => state.settings.settings['suggestions'],
  scheduledActivityConfig: state => state.settings.settings['Pleroma.ScheduledActivity'],
  teslaAdapterConfig: state => state.settings.settings['adapter'],
  twitterConfig: state => state.settings.settings['Ueberauth.Strategy.Twitter.OAuth'],
  ueberauthConfig: state => state.settings.settings['Ueberauth'],
  uploadAnonymizeFilenameConfig: state => state.settings.settings['Pleroma.Upload.Filter.AnonymizeFilename'],
  uploadConfig: state => state.settings.settings['Pleroma.Upload'],
  uploadFilterMogrifyConfig: state => state.settings.settings['Pleroma.Upload.Filter.Mogrify'],
  uploadersLocalConfig: state => state.settings.settings['Pleroma.Uploaders.Local'],
  uploadMDIIConfig: state => state.settings.settings['Pleroma.Uploaders.MDII'],
  uploadS3Config: state => state.settings.settings['Pleroma.Uploaders.S3'],
  uriSchemesConfig: state => state.settings.settings['uri_schemes'],
  userConfig: state => state.settings.settings['user'],
  vapidDetailsConfig: state => state.settings.settings['vapid_details'],
  webhookUrlConfig: state => state.settings.settings['webhook_url']
}
export default getters
